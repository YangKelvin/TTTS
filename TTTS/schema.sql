DROP TABLE IF EXISTS COUNTRY;
DROP TABLE IF EXISTS AREA;
DROP TABLE IF EXISTS COUNTY;
DROP TABLE IF EXISTS DETAIL_ADDRESS;
DROP TABLE IF EXISTS ADDRESS;
DROP TABLE IF EXISTS GOODS;
DROP TABLE IF EXISTS PERMISSION;
DROP TABLE IF EXISTS ACCOUNT;
DROP TABLE IF EXISTS SHOPPINGCART;
DROP TABLE IF EXISTS DISCOUNTTYPE;
DROP TABLE IF EXISTS DISCOUNT;
DROP TABLE IF EXISTS SHIPPINGMETHOD;
DROP TABLE IF EXISTS STATUS;
DROP TABLE IF EXISTS PAYMENT;
DROP TABLE IF EXISTS ORDERS;
DROP TABLE IF EXISTS BLOCKLIST;
DROP TABLE IF EXISTS SALES_ON;

CREATE TABLE COUNTRY (
    CountryID INTEGER AUTO_INCREMENT,
    CountryName VARCHAR(20),
    PRIMARY KEY(CountryID)
);

CREATE TABLE AREA (
    AreaID INTEGER AUTO_INCREMENT,
    AreaName VARCHAR(20),
    PRIMARY KEY(AreaID)
);

CREATE TABLE COUNTY (
    CountyID INTEGER AUTO_INCREMENT,
    CountyName VARCHAR(20),
    PRIMARY KEY(CountyID)
);

CREATE TABLE DETAIL_ADDRESS (
    DAddressID INTEGER AUTO_INCREMENT,
    DetailAddress VARCHAR(200),
    PRIMARY KEY(DAddressID)
);

CREATE TABLE ADDRESS (
    AddressID INTEGER AUTO_INCREMENT,
    CountryID INT,
    AreaID INT,
    CountyID INT,
    DAddressID INT,
    PRIMARY KEY(AddressID),
    FOREIGN KEY(CountryID) REFERENCES COUNTRY(CountryID),
    FOREIGN KEY(AreaID) REFERENCES AREA(AreaID),
    FOREIGN KEY(CountyID) REFERENCES COUNTY(CountyID),
    FOREIGN KEY(DAddressID) REFERENCES DETAIL_ADDRESS(DAddressID)
);

CREATE TABLE GOODS (
    GoodsID INTEGER AUTO_INCREMENT,
    GoodsName VARCHAR(20),
    GoodsType VARCHAR(20),
    Price INT,
    StockQuantity INT,
    Introduction VARCHAR(255),
    ImageName VARCHAR(255),
    CountryOfOrigin INT,
    PRIMARY KEY(GoodsID),
    FOREIGN KEY(CountryOfOrigin) REFERENCES COUNTRY(CountryID)
);

CREATE TABLE PERMISSION (
    PermissionID INTEGER AUTO_INCREMENT,
    PermissionName VARCHAR(20),
    PRIMARY KEY(PermissionID)
);

CREATE TABLE ACCOUNT (
    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,
    Account VARCHAR(20),
    Password VARCHAR(20),
    PermissionID INT,
    UserName VARCHAR(20),
    IdentificationNumber VARCHAR(20),
    Gender VARCHAR(2),
    CellphoneNumber VARCHAR(10),
    Email VARCHAR(50),
    FOREIGN KEY(PermissionID) REFERENCES PERMISSION(PermissionID)
);

CREATE TABLE SHOPPINGCART (
    AccountID INT,
    GoodsID INT,
    Ammount INT,
    PRIMARY KEY(AccountID, GoodsID),
    FOREIGN KEY(AccountID) REFERENCES ACCOUNT(AccountID),
    FOREIGN KEY(GoodsID) REFERENCES GOODS(GoodsID)
);

CREATE TABLE DISCOUNTTYPE (
    DiscountTypeID INTEGER AUTO_INCREMENT,
    DiscountTypeName VARCHAR(20),
    PRIMARY KEY(DiscountTypeID)
);

CREATE TABLE DISCOUNT (
    DiscountID INTEGER AUTO_INCREMENT,
    DiscountName VARCHAR(20),
    DiscountTypeID INT,
    DiscountPercentage FLOAT,
    Date DATETIME,
    PRIMARY KEY(DiscountID),
    FOREIGN KEY(DiscountTypeID) REFERENCES DISCOUNTTYPE(DiscountTypeID)
);

CREATE TABLE SHIPPINGMETHOD (
    ShippingMethodID INTEGER AUTO_INCREMENT,
    ShippingMethodName VARCHAR(20),
    PRIMARY KEY(ShippingMethodID)
);

CREATE TABLE STATUS (
    StatusID INTEGER AUTO_INCREMENT,
    StatusName VARCHAR(20),
    PRIMARY KEY(StatusID)
);

CREATE TABLE PAYMENT (
    PaymentID INTEGER AUTO_INCREMENT,
    PaymentName VARCHAR(20),
    PRIMARY KEY(PaymentID)
);

CREATE TABLE ORDERS (
    OrderID INTEGER AUTO_INCREMENT,
    AccountID INT,
    AddressID INT,
    ShippingMethodID INT,
    StatusID INT,
    DATE DATETIME,
    DiscountID INT,
    PaymentID INT,
    PRIMARY KEY(OrderID),
    FOREIGN KEY(AccountID) REFERENCES ACCOUNT(AccountID),
    FOREIGN KEY(AddressID) REFERENCES ADDRESS(AddressID),
    FOREIGN KEY(ShippingMethodID) REFERENCES SHIPPINGMETHOD(ShippingMethodID),
    FOREIGN KEY(StatusID) REFERENCES STATUS(StatusID),
    FOREIGN KEY(DiscountID) REFERENCES DISCOUNT(DiscountID),
    FOREIGN KEY(PaymentID) REFERENCES PAYMENT(PaymentID)
);

CREATE TABLE BLOCKLIST (
    BlockID INTEGER AUTO_INCREMENT,
    AccountID INT,
    PRIMARY KEY(BlockID),
    FOREIGN KEY(AccountID) REFERENCES ACCOUNT(AccountID)
);

CREATE TABLE SALES_ON (
    OrderID int,
    GoodsID int,
    Ammount int,
    PRIMARY KEY(OrderID, GoodsID),
    FOREIGN KEY(OrderID) REFERENCES ORDERS(OrderID),
    FOREIGN KEY(GoodsID) REFERENCES GOODS(GoodsID)
);

INSERT INTO PERMISSION VALUES (1, 'Admin');
INSERT INTO PERMISSION VALUES (2, 'Staff');
INSERT INTO PERMISSION VALUES (3, 'Customer');
